.defaults:
  awsRegion: &awsRegion us-east-2
  clusterName: &clusterName demoapp
  domain: &domain demoapp.com
  veleraBucker: &veleroBucket backup.aws

spec:
  destination:
    project: system
    server: https://kubernetes.default.svc

anchoreEngine:
  enabled: true
  values:
    postgresql:
      persistence:
        size: 50Gi
    anchoreGlobal:
      allowECRUseIAMRole: true
      defaultAdminPassword: P@ssw0rd
      defaultAdminEmail: support@bluesentryit.com
      logLevel: WARN
      extraEnv:
        - name: ANCHORE_LOG_LEVEL
          value: WARN
    anchoreAnalyzer:
      annotations:
        iam.amazonaws.com/role: k8s-anchore-engine
    anchoreApi:
      annotations:
        iam.amazonaws.com/role: k8s-anchore-engine
      nodeSelector:
        kubernetes.io/role: system
    anchoreCatalog:
      annotations:
        iam.amazonaws.com/role: k8s-anchore-engine
      nodeSelector:
        kubernetes.io/role: system
    anchorePolicyEngine:
      annotations:
        iam.amazonaws.com/role: k8s-anchore-engine
      nodeSelector:
        kubernetes.io/role: system
    anchoreSimpleQueue:
      annotations:
        iam.amazonaws.com/role: k8s-anchore-engine
      nodeSelector:
        kubernetes.io/role: system
    ingress:
      enabled: true
      apiHosts:
        - anchore-api
      annotations:
        kubernetes.io/ingress.class: nginx-internal
        certmanager.k8s.io/cluster-issuer: letsencrypt-production
      tls:
        - hosts:
            - anchore-api
          secretName: anchoreapi
certManager:
  enabled: true
  values:
    cainjector:
      enabled: false
    webhook:
      enabled: false
#    podAnnotations:
#      iam.amazonaws.com/role: k8s-cert-manager
#    ingressShim:
#      defaultACMEChallengeType: dns01
#      defaultACMEDNS01ChallengeProvider: route53
clusterAutoscaler:
  enabled: true
  values:
    nameOverride: "cluster-autoscaler"
    autoDiscovery:
      clusterName: *clusterName
    awsRegion: *awsRegion
    cloudProvider: aws
    extraArgs:
      balance-similar-node-groups:
      ignore-daemonsets-utilization: "true"
      skip-nodes-with-local-storage: "false"
      skip-nodes-with-system-pods: "false"
      scale-down-utilization-threshold: "0.65"
    image:
      tag: v1.14.7
    podAnnotations:
      iam.amazonaws.com/role: k8s-cluster-autoscaler
    rbac:
      create: true
    sslCertPath: /etc/kubernetes/pki/ca.crt
elasticsearch:
  enabled: true
  values:
    antiAffinityTopologyKey: failure-domain.beta.kubernetes.io/zone
    esConfig:
      elasticsearch.yml: |
        http.max_content_length: 500mb
    rbac:
      create: true
elasticsearchCurator:
  enabled: true
  values:
    cronjob:
      schedule: 0 1 * * *
    configMaps:
      action_file_yml: |-
        ---
        actions:
          1:
            action: delete_indices
            description: "Clean up ES by deleting old indices"
            options:
              timeout_override:
              continue_if_exception: False
              disable_action: False
              ignore_empty_list: True
            filters:
            - filtertype: age
              source: name
              direction: older
              timestring: '%Y.%m.%d'
              unit: days
              unit_count: 7
              field:
              stats_result:
              epoch:
              exclude: False
      config_yml: |-
        ---
        client:
          hosts:
            - elasticsearch-master
          port: 9200
externalDns:
  enabled: true
  values:
    aws:
      region: *awsRegion
      roleArn: k8s-external-dns
      zoneType: public
    domainFilters:
      - *domain
    podAnnotations:
      iam.amazonaws.com/role: k8s-external-dns
    policy: sync
    provider: aws
    rbac:
      create: true
    sources:
      - service
      - ingress
    txtOwnerId: *clusterName
fluentbit:
  enabled: false
fluentdElasticsearch:
  enabled: true
  values:
    elasticsearch:
      logstashPrefix: logs
      host: elasticsearch-master
kube2iam:
  enabled: true
  values:
    aws:
      region: *awsRegion
    extraArgs:
      auto-discover-base-arn: ""
      default-role: k8s-default-role
    host:
      iptables: true
      interface: eni+
    rbac:
      create: true
    tolerations:
      - operator: Exists
metricsServer:
  enabled: true
nginxIngress:
  private:
    values:
      controller:
        extraArgs:
          enable-ssl-passthrough: ""
        ingressClass: nginx-internal
        publishService:
          enabled: true
        service:
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
          omitClusterIP: true
        defaultBackend:
          service:
            omitClusterIP: true
  public:
    values:
      controller:
        extraArgs:
          enable-ssl-passthrough: ""
        ingressClass: nginx
        publishService:
          enabled: true
        service:
          omitClusterIP: true
        defaultBackend:
          service:
            omitClusterIP: true
prometheusOperator:
  enabled: true
  values:
    alertmanager:
      alertmanagerSpec:
        logFormat: logfmt
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: gp2
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
#      ingress:
#        enabled: true
#        annotations:
#          kubernetes.io/ingress.class: nginx-internal
#          certmanager.k8s.io/cluster-issuer: letsencrypt-production
#        hosts:
#          - &alertmanagerHostname alertmanager
#        tls:
#          - hosts:
#              - *alertmanagerHostname
#            secretName: *alertmanagerHostname
    defaultRules:
      rules:
        kubernetesResources: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    grafana:
      env:
        GF_AUTH_BASIC_ENABLED: "false"
        GF_AUTH_ANONYMOUS_ENABLED: "true"
        GF_AUTH_ANONYMOUS_ORG_ROLE: Admin
#      ingress:
#        enabled: true
#        annotations:
#          kubernetes.io/ingress.class: nginx-internal
#          certmanager.k8s.io/cluster-issuer: letsencrypt-production
#        hosts:
#          - &grafanaHostname grafana
#        tls:
#          - hosts:
#              - *grafanaHostname
#            secretName: *grafanaHostname
#    prometheus:
#      ingress:
#        enabled: true
#        annotations:
#          kubernetes.io/ingress.class: nginx-internal
#          certmanager.k8s.io/cluster-issuer: letsencrypt-production
#        hosts:
#          - &prometheusHostname prometheus
#        tls:
#          - hosts:
#              - *prometheusHostname
#            secretName: *prometheusHostname
      prometheusSpec:
        retention: 30d
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: gp2
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 100Gi
sealedSecretsController:
  enabled: true
velero:
  enabled: true
  values:
    configuration:
      backupStorageLocation:
        name: aws
        bucket: *veleroBucket
        config:
          region: *awsRegion
      provider: aws
      volumeSnapshotLocation:
        config:
          region: *awsRegion
        name: aws
      credentials:
        useSecret: false
      deployRestic: true
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      podAnnotations:
        iam.amazonaws.com/role: k8s-velero
      initContainers:
        - image: velero/velero-plugin-for-aws:v1.0.0
          name: velero-plugin-for-aws
          volumeMounts:
            - mountPath: /target
              name: plugins
